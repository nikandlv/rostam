use std::{fs::OpenOptions, io::Write};

use inquire::{InquireError, Select};
use sudo::escalate_if_needed;

fn main() {
    if escalate_if_needed().is_err() {
        panic!("Need root permissions to update dns")
    }

    let options: Vec<&str> = vec!["Shecan DNS", "403 DNS"];

    let ans: Result<&str, InquireError> =
        Select::new("Which DNS service you want to apply?", options).prompt();

    match ans {
        Ok(selection) => update_dns(selection),
        Err(_) => println!("There was an error, please try again"),
    }
}

fn update_dns(selection: &str) {
    let mut file = OpenOptions::new()
        .read(true)
        .write(true)
        .append(true)
        .create(true)
        .open("/etc/resolv.conf")
        .unwrap();

    let dns = match selection {
        "Shecan DNS" => "# Generated by rostam\nnameserver 185.51.200.2\nnameserver 178.22.122.100",
        "403 DNS" => "# Generated by rostam\nnameserver 10.202.10.202\nnameserver 10.202.10.102",
        &_ => panic!("Selection not found!"),
    };

    file.set_len(0).expect("Cannot clear /etc/resolv.conf");
    file.write(dns.as_bytes()).unwrap();
}
